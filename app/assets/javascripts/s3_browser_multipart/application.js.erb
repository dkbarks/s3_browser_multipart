// This is a manifest file that'll be compiled into application.js, which will include all the files
// listed below.
//
// Any JavaScript/Coffee file within this directory, lib/assets/javascripts, vendor/assets/javascripts,
// or vendor/assets/javascripts of plugins, if any, can be referenced here using a relative path.
//
// It's not advisable to add code directly here, but if you do, it'll appear at the bottom of the
// the compiled file.
//
// WARNING: THE FIRST BLANK LINE MARKS THE END OF WHAT'S TO BE PROCESSED, ANY BLANK LINE SHOULD
// GO AFTER THE REQUIRES BELOW.
//
//= require jquery
//= require jquery_ujs
<% environment.context_class.instance_eval { include S3BrowserMultipart::Engine.routes.url_helpers } %>

function setUpFileSelector(){
  var upload_resource_url = '<%= uploads_path%>';
  //Detect file selection 
  $('input.file_uploader').change(function(){
    $(this).prop('disabled', true).addClass('file_input_disabled');
    self = this;
    $.each(this.files,function(idx,file){
      $.ajax({
        type: "POST",
        dataType: "json",
        url: upload_resource_url,
        data: jQuery.extend({size: file.size, name: file.name, type: file.type}, $(self).data()),
        success: jQuery.proxy(uploadCreation)
      });
    });
  });
}

function uploadCreation(data){
  self = $('input.file_uploader')[0];
  $.each(self.files,
    function(idx,file){
      if(file.name == data.name && $(self).data('secureRandom')==data.secure_random ){
        uploadPart(1, data, file)
      }
  });
}
/*
Upload part 
partNumber can be 1 up to 10000
*/
function uploadPart(partNumber, data, file){
  //slice = calculateSlice(partNumber, $(file).data(), file.size)
}
/*
Part uploaded successfully and calls next part
*/
function partUploaded(){

}

function calculateSlice(partNumber, chunkSize, fileSize){
  if(fileSize < chunkSize){
    //1 part with whole file
    return {start: 0, end: fileSize-1};
  }
  if(partNumber*chunkSize > fileSize || partNumber < 1){
    throw "partNumber invalid";
  }
  start = chunkSize * (partNumber-1);
  end = chunkSize * (partNumber);
  if(end > fileSize){
    end = fileSize-1;
  }
  return {start: start, end: end};

}

function confirmBrowserCompatibility(){
  return (window.File && window.FileReader && 
    window.FileList && window.Blob);
}

$(function(){
  if (!confirmBrowserCompatibility()){
    alert('Browser not soported');
    return ;
  }
  setUpFileSelector();
  
})